
basic_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000260  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a73  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000895  00000000  00000000  00000d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000428  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000505  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000df  00000000  00000000  00001fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000020b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	61 d0       	rcall	.+194    	; 0x16c <main>
  aa:	9e c0       	rjmp	.+316    	; 0x1e8 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <_Z13commandstrobeh>:
// variables
uint8_t status, data;

void commandstrobe(uint8_t addr)
{
	PORTB &= ~(1<<PB0);
  ae:	98 b3       	in	r25, 0x18	; 24
  b0:	9e 7f       	andi	r25, 0xFE	; 254
  b2:	98 bb       	out	0x18, r25	; 24
	SPDR = addr;
  b4:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & 0x80));
  b6:	77 9b       	sbis	0x0e, 7	; 14
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <_Z13commandstrobeh+0x8>
	status = SPDR;
  ba:	8f b1       	in	r24, 0x0f	; 15
  bc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <status>
	PORTB |= (1<<PB0);
  c0:	88 b3       	in	r24, 0x18	; 24
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	88 bb       	out	0x18, r24	; 24
  c6:	08 95       	ret

000000c8 <_Z9write_regjh>:
}

void write_reg(uint16_t addr, uint8_t data)
{
	PORTB &= ~(1<<PB0);
  c8:	98 b3       	in	r25, 0x18	; 24
  ca:	9e 7f       	andi	r25, 0xFE	; 254
  cc:	98 bb       	out	0x18, r25	; 24
	SPDR = (addr | WRITE_SINGLE);
  ce:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & 0x80));
  d0:	77 9b       	sbis	0x0e, 7	; 14
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <_Z9write_regjh+0x8>
	status = SPDR;
  d4:	8f b1       	in	r24, 0x0f	; 15
  d6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <status>
	SPDR = data;
  da:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & 0x80));
  dc:	77 9b       	sbis	0x0e, 7	; 14
  de:	fe cf       	rjmp	.-4      	; 0xdc <_Z9write_regjh+0x14>
	status = SPDR;
  e0:	8f b1       	in	r24, 0x0f	; 15
  e2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <status>
	PORTB |= (1<<PB0);
  e6:	88 b3       	in	r24, 0x18	; 24
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	88 bb       	out	0x18, r24	; 24
  ec:	08 95       	ret

000000ee <_Z7readRegj>:
}

void readReg(uint16_t addr)
{
	PORTB &= ~(1<<PB0);
  ee:	28 b3       	in	r18, 0x18	; 24
  f0:	2e 7f       	andi	r18, 0xFE	; 254
  f2:	28 bb       	out	0x18, r18	; 24
	// sending address
	if(addr<=0x002E)
  f4:	8f 32       	cpi	r24, 0x2F	; 47
  f6:	91 05       	cpc	r25, r1
  f8:	40 f4       	brcc	.+16     	; 0x10a <_Z7readRegj+0x1c>
	{
		SPDR = (addr | READ_SINGLE);
  fa:	80 68       	ori	r24, 0x80	; 128
  fc:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & 0x80));
  fe:	77 9b       	sbis	0x0e, 7	; 14
 100:	fe cf       	rjmp	.-4      	; 0xfe <_Z7readRegj+0x10>
		status = SPDR;
 102:	8f b1       	in	r24, 0x0f	; 15
 104:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <status>
 108:	0e c0       	rjmp	.+28     	; 0x126 <_Z7readRegj+0x38>
	}
	else
	{
		SPDR = ((addr>>8) | READ_SINGLE);
 10a:	29 2f       	mov	r18, r25
 10c:	20 68       	ori	r18, 0x80	; 128
 10e:	2f b9       	out	0x0f, r18	; 15
		while(!(SPSR & 0x80));
 110:	77 9b       	sbis	0x0e, 7	; 14
 112:	fe cf       	rjmp	.-4      	; 0x110 <_Z7readRegj+0x22>
		status = SPDR;
 114:	9f b1       	in	r25, 0x0f	; 15
 116:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <status>
		SPDR = addr;
 11a:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & 0x80));
 11c:	77 9b       	sbis	0x0e, 7	; 14
 11e:	fe cf       	rjmp	.-4      	; 0x11c <_Z7readRegj+0x2e>
		status = SPDR;
 120:	8f b1       	in	r24, 0x0f	; 15
 122:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <status>
	}
	// receiving value
	SPDR = 0x00;
 126:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR & 0x80));
 128:	77 9b       	sbis	0x0e, 7	; 14
 12a:	fe cf       	rjmp	.-4      	; 0x128 <_Z7readRegj+0x3a>
	data = SPDR;
 12c:	8f b1       	in	r24, 0x0f	; 15
 12e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	PORTB |= (1<<PB0);
 132:	88 b3       	in	r24, 0x18	; 24
 134:	81 60       	ori	r24, 0x01	; 1
 136:	88 bb       	out	0x18, r24	; 24
 138:	08 95       	ret

0000013a <_Z9uart_initv>:
}

void uart_init()
{
	UCSR0B |= (1<<RXEN0) | (1<<TXEN0);		// turn on transmission and reception
 13a:	8a b1       	in	r24, 0x0a	; 10
 13c:	88 61       	ori	r24, 0x18	; 24
 13e:	8a b9       	out	0x0a, r24	; 10
	UCSR0C |=  (1<<UCSZ00) | (1<<UCSZ01);	// use 8-bit char size
 140:	e5 e9       	ldi	r30, 0x95	; 149
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	86 60       	ori	r24, 0x06	; 6
 148:	80 83       	st	Z, r24
	UBRR0L = BAUD_PRESCALE;					// load lower 8-bits of the baud rate
 14a:	83 e3       	ldi	r24, 0x33	; 51
 14c:	89 b9       	out	0x09, r24	; 9
	UBRR0H = (BAUD_PRESCALE>>8);			// load upper 8-bits
 14e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 152:	08 95       	ret

00000154 <_Z12uart_tx_charh>:
}

void uart_tx_char(uint8_t ch)
{
	while(!(UCSR0A & (1<<UDRE0)));	// wait for empty transmit buffer
 154:	5d 9b       	sbis	0x0b, 5	; 11
 156:	fe cf       	rjmp	.-4      	; 0x154 <_Z12uart_tx_charh>
	UDR0 = ch;
 158:	8c b9       	out	0x0c, r24	; 12
 15a:	08 95       	ret

0000015c <_Z15SPI_MASTER_Initv>:


void SPI_MASTER_Init(void)
{
	/* set MOSI, SCK and SS as output */
	DDRB = 0x07;
 15c:	87 e0       	ldi	r24, 0x07	; 7
 15e:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<PB0);
 160:	88 b3       	in	r24, 0x18	; 24
 162:	81 60       	ori	r24, 0x01	; 1
 164:	88 bb       	out	0x18, r24	; 24
	/* enable SPI, master, clk rate fck/16 */
	SPCR = 0x51;
 166:	81 e5       	ldi	r24, 0x51	; 81
 168:	8d b9       	out	0x0d, r24	; 13
 16a:	08 95       	ret

0000016c <main>:
}

int main(void)
{
	/* replace with your application code */
	uart_init();
 16c:	e6 df       	rcall	.-52     	; 0x13a <_Z9uart_initv>
	SPI_MASTER_Init();
 16e:	f6 df       	rcall	.-20     	; 0x15c <_Z15SPI_MASTER_Initv>
 170:	8f ef       	ldi	r24, 0xFF	; 255
	DDRF = 0xFF;
 172:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	commandstrobe(SRES);
 176:	80 e3       	ldi	r24, 0x30	; 48
 178:	9a df       	rcall	.-204    	; 0xae <_Z13commandstrobeh>
	commandstrobe(SFRX);
 17a:	8a e3       	ldi	r24, 0x3A	; 58
 17c:	98 df       	rcall	.-208    	; 0xae <_Z13commandstrobeh>
	commandstrobe(SFTX);
 17e:	8b e3       	ldi	r24, 0x3B	; 59
 180:	96 df       	rcall	.-212    	; 0xae <_Z13commandstrobeh>
 182:	86 e3       	ldi	r24, 0x36	; 54
	commandstrobe(SIDLE);
 184:	94 df       	rcall	.-216    	; 0xae <_Z13commandstrobeh>
 186:	60 eb       	ldi	r22, 0xB0	; 176
	while (1)
	{
		write_reg(IOCFG3, 0xB0);
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	9d df       	rcall	.-198    	; 0xc8 <_Z9write_regjh>
		readReg(IOCFG3);
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	ad df       	rcall	.-166    	; 0xee <_Z7readRegj>
 194:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <status>
		uart_tx_char(status);  //status should be 0x01
 198:	dd df       	rcall	.-70     	; 0x154 <_Z12uart_tx_charh>
 19a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <status>
		PORTF = (status>>4); //0b 0000 0001
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	95 95       	asr	r25
 1a2:	87 95       	ror	r24
 1a4:	95 95       	asr	r25
 1a6:	87 95       	ror	r24
 1a8:	95 95       	asr	r25
 1aa:	87 95       	ror	r24
 1ac:	95 95       	asr	r25
 1ae:	87 95       	ror	r24
 1b0:	c2 e6       	ldi	r28, 0x62	; 98
 1b2:	d0 e0       	ldi	r29, 0x00	; 0
 1b4:	88 83       	st	Y, r24
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	89 e6       	ldi	r24, 0x69	; 105
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ba:	98 e1       	ldi	r25, 0x18	; 24
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0x50>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x5a>
 1c6:	00 00       	nop
 1c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		_delay_ms(1000);
		uart_tx_char(data);   //data is 0xB0 or 176 or 0b 1011 0000
 1cc:	c3 df       	rcall	.-122    	; 0x154 <_Z12uart_tx_charh>
 1ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		PORTF = (data>>4);   //0b 0000 1011
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	95 95       	asr	r25
 1d6:	87 95       	ror	r24
 1d8:	95 95       	asr	r25
 1da:	87 95       	ror	r24
 1dc:	95 95       	asr	r25
 1de:	87 95       	ror	r24
 1e0:	95 95       	asr	r25
 1e2:	87 95       	ror	r24
 1e4:	88 83       	st	Y, r24
 1e6:	cf cf       	rjmp	.-98     	; 0x186 <main+0x1a>

000001e8 <_exit>:
 1e8:	f8 94       	cli

000001ea <__stop_program>:
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <__stop_program>
